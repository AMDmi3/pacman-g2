.TH makepkg 8 "January 30, 2006" "makepkg @PACKAGE_VERSION@" ""
.SH NAME
makepkg \- package build utility
.SH SYNOPSIS
\fBmakepkg [options]\fP
.SH DESCRIPTION
\fBmakepkg\fP will build packages for you.  All it needs is
a build-capable linux platform, wget, and some build scripts.  The advantage
to a script-based build is that you only really do the work once.  Once you
have the build script for a package, you just need to run makepkg and it
will do the rest: download and validate source files, check dependencies,
configure the buildtime settings, build the package, install the package
into a temporary root, make customizations, generate meta-info, and package
the whole thing up for \fBpacman\fP to use.

\fBmakeworld\fP can be used to rebuild an entire package group or the
entire build tree.  See \fBmakeworld --help\fP for syntax.
.SH BUILD PROCESS (or How To Build Your Own Packages)
Start in an isolated directory (ie, it's not used for anything other
than building this package).  The build script should be called FrugalBuild
and it should bear resemblance to the example below.

\fBNOTE:\fP If you have a local copy of the Frugalware Source Tree (FST)
on your computer, you can copy the source/apps/cabextract/FrugalBuild
file to your new package
build directory and edit it from there.  To acquire/sync the FST, use
the \fBrepoman upd\fP command provided by the pacman-tools package.

.TP
.TP
.SH FrugalBuild Example:
.RS
.nf
pkgname=modutils
pkgver=2.4.25
pkgrel=1
pkgdesc="Utilities for inserting and removing modules from the linux kernel"
url="http://www.kernel.org"
backup=(etc/modules.conf)
makedepends=('bash' 'mawk')
depends=('glibc' 'zlib')
archs=('i686')
up2date="lynx -dump http://www.kernel.org/pub/linux/utils/kernel/modutils/v2.4/|grep LATEST |sed -n 's/.*S-\([0-9\.]*\) .*/\1/; 1 p'"
source=(ftp://ftp.kernel.org/pub/linux/utils/kernel/$pkgname/v2.4/$pkgname-$pkgver.tar.bz2 \\
        modules.conf)
md5sums=('2c0cca3ef6330a187c6ef4fe41ecaa4d' \\
        '35175bee593a7cc7d6205584a94d8625')

build() {
  cd $startdir/src/$pkgname-$pkgver
  ./configure --prefix=/usr --enable-insmod-static
  make || return 1
  make prefix=$startdir/pkg/usr install
  mv $startdir/pkg/usr/sbin $startdir/pkg
  mkdir -p $startdir/pkg/etc
  cp ../modules.conf $startdir/pkg/etc
}
.fi
.RE

As you can see, the setup is fairly simple.  The first three lines define
the package name and version info.  They also define the final package name
which will be of the form \fI$pkgname-$pkgver-$pkgrel-$arch.fpm\fP.  The fourth
line provides a brief description of the package.  These four lines should
be present in every FrugalBuild script.

The line with \fIbackup=\fP specifies files that should be treated specially
when removing or upgrading packages.  See \fBHANDLING CONFIG FILES\fP in
the \fIpacman\fP manpage for more information on this.

Lines 7 and 8 list the dependencies for this package.  The \fIdepends\fP array
specifies the run-time dependencies and \fImakedepends\fP specifies the build-time
dependencies.  In order to run the package, \fIdepends\fP must be satisfied.  To
build the package, \fBall\fP dependencies must be satisifed first.  makepkg
will check this before attempting to build the package.

The \fIsource\fP array tells makepkg which files to download/extract before compiling
begins.  The \fImd5sums\fP array provides md5sums for each of these files.  These
are used to validate the integrity of the source files.

Once your FrugalBuild is created, you can run \fImakepkg\fP from the build directory.
makepkg will then check dependencies and look for the source files required to
build.  If some are missing it will attempt to download them, provided there is
a fully-qualified URL in the \fIsource\fP array.

The sources are then extracted into a directory called ./src and
the \fIbuild\fP function is called.  This is where all package configuration,
building, and installing should be done.  Any customization will likely take
place here.

After a package is built, the \fIbuild\fP function must install the package
files into a special package root, which can be referenced by \fB$startdir/pkg\fP
in the \fIbuild\fP function.  The typical way to do this is one of the following:
.RS
.nf

make DESTDIR=$startdir/pkg install

or

make prefix=$startdir/pkg/usr install

.fi
.RE
Notice that the "/usr" portion should be present with "prefix", but not "DESTDIR".
"DESTDIR" is the favorable option to use, but not all Makefiles support it.  Use
"prefix" only when "DESTDIR" is unavailable.

Once the package is successfully installed into the package root, \fImakepkg\fP
will prepare some documentation. It will
then strip debugging info from libraries and binaries and generate a meta-info
file.  Finally, it will compress everything into a .fpm file and leave it
in the directory you ran \fBmakepkg\fP from.

At this point you should have a package file in the current directory, named
something like name-version-release-arch.fpm.  Done!

.SH Install/Upgrade/Remove Scripting
Pacman has the ability to store and execute a package-specific script when it
installs, removes, or upgrades a package.  This allows a package to "configure
itself" after installation and do the opposite right before it is removed.

The exact time the script is run varies with each operation:
.TP
.B pre_install
script is run right before files are extracted.

.TP
.B post_install
script is run right after files are extracted.

.TP
.B pre_upgrade
script is run right before files are extracted.

.TP
.B post_upgrade
script is run after files are extracted.

.TP
.B pre_remove
script is run right before files are removed.

.TP
.B post_remove
script is run right after files are removed.

.RE
To use this feature, just create a file (eg, pkgname.install) and put it in
the same directory as the FrugalBuild script.  Then use the \fIinstall\fP directive:
.RS
.nf
install=pkgname.install
.fi
.RE

The install script does not need to be specified in the \fIsource\fP array.

.TP
.TP
.SH Install scripts must follow this format:
.RS
.nf
# arg 1:  the new package version
pre_install() {
  #
  #  do pre-install stuff here
  #
  /bin/true
}

# arg 1:  the new package version
post_install() {
  #
  #  do post-install stuff here
  #
  /bin/true
}

# arg 1:  the new package version
# arg 2:  the old package version
pre_upgrade() {
  #
  #  do pre-upgrade stuff here
  #
  /bin/true
}

# arg 1:  the new package version
# arg 2:  the old package version
post_upgrade() {
  #
  #  do post-upgrade stuff here
  #
  /bin/true
}

# arg 1:  the old package version
pre_remove() {
  #
  #  do pre-remove stuff here
  #
  /bin/true
}

# arg 1:  the old package version
post_remove() {
  #
  #  do post-remove stuff here
  #
  /bin/true
}

op=$1
shift
$op $*
.fi
.RE

.SH FrugalBuild Directives
.TP
.B pkgname
The name of the package.  This has be a unix-friendly name as it will be
used in the package filename.

.TP
.B pkgver
This is the version of the software as released from the author (eg, 2.7.1).

.TP
.B pkgrel
This is the release number specific to Frugalware Linux packages.

.TP
.B pkgdesc
This should be a brief description of the package and its functionality.

.TP
.B url
This field contains an optional URL that is associated with the piece of software
being packaged.  This is typically the project's website.

.TP
.B license
Sets the license type (eg, "GPL", "BSD", "NON-FREE").  (\fBNote\fP: This
option is still in development and may change in the future)

.TP
.B install
Specifies a special install script that is to be included in the package.
This file should reside in the same directory as the FrugalBuild, and will be
copied into the package by makepkg.  It does not need to be included in the
\fIsource\fP array.  (eg, install=modutils.install)

.TP
.B up2date
This directive should contain a command that prints the current upstream stable
version of the project. This way we can check for newer version without visiting
manually the project's website (see above).

.TP
.B source \fI(array)\fP 
The \fIsource\fP line is an array of source files required to build the
package.  Source files must reside in the same directory as the FrugalBuild
file, unless they have a fully-qualified URL.  Then if the source file
does not already exist in /var/cache/pacman/src, the file is downloaded
by wget.

.TP
.B md5sums \fI(array)\fP
If this field is present, it should contain an MD5 hash for every source file
specified in the \fIsource\fP array (in the same order).  makepkg will use
this to verify source file integrity during subsequent builds.  To easily
generate md5sums, first build using the FrugalBuild then run
\fBmakepkg -G >>PKGBILD\fP.  Then you can edit the FrugalBuild and move the
\fImd5sums\fP line from the bottom to an appropriate location.

.TP
.B sha1sums \fI(array)\fP
If this field is present, it should contain an SHA1 hash for every source file
specified in the \fIsource\fP array (in the same order).  makepkg will use
this to verify source file integrity during subsequent builds.  To easily
generate sha1sums, first build using the FrugalBuild then run
\fBmakepkg -g >>FrugalBuild\fP.  Then you can edit the FrugalBuild and move the
\fIsha1sums\fP line from the bottom to an appropriate location.

.TP
.B groups \fI(array)\fP
This is an array of symbolic names that represent groups of packages, allowing
you to install multiple packages by requesting a single target.  For example,
one could install all KDE packages by installing the 'kde' group.

.TP
.B archs \fI(array)\fP
This array defines on which architectures the given package is avalibable.
If it's not available, that will mean that gensync will skip it when generating
package databases.

.TP
.B backup \fI(array)\fP 
A space-delimited array of filenames (without a preceding slash). The
\fIbackup\fP line will be propagated to the package meta-info file for
pacman.  This will designate all files listed there to be backed up if this
package is ever removed from a system.  See \fBHANDLING CONFIG FILES\fP in
the \fIpacman\fP manpage for more information.

.TP
.B depends \fI(array)\fP 
An array of packages that this package depends on to build and run.  Packages
in this list should be surrounded with single quotes and contain at least the
package name.  They can also include a version requirement of the form
\fBname<>version\fP, where <> is one of these three comparisons: \fB>=\fP
(greater than equal to), \fB<=\fP (less than or equal to), or \fB=\fP (equal to).
See the FrugalBuild example above for an example of the \fIdepends\fP directive.

.TP
.B makedepends \fI(array)\fP
An array of packages that this package depends on to build (ie, not required
to run).  Packages in this list should follow the same format as \fIdepends\fP.

.TP
.B rodepends \fI(array)\fP
An array of packages that this package depends on to run (ie, not required to
build). Generally \fIrodepends\fP should be avoided in favour of \fIdepends\fP
except where this will create circular dependency chains. (For example building
logrotate doesn't requires to have dcron installed.) Packages in this list
should follow the same format as \fIdepends\fP.

.TP
.B conflicts \fI(array)\fP 
An array of packages that will conflict with this package (ie, they cannot both
be installed at the same time).  This directive follows the same format as
\fIdepends\fP except you cannot specify versions here, only package names.

.TP
.B provides \fI(array)\fP 
An array of "virtual provisions" that this package provides.  This allows a package
to provide dependency names other than it's own package name.  For example, the
kernel-scsi and kernel-ide packages can each provide 'kernel' which allows packages
to simply depend on 'kernel' rather than "kernel-scsi OR kernel-ide OR ..."

.TP
.B replaces \fI(array)\fP 
This is an array of packages that this package should replace, and can be used to handle
renamed/combined packages.  For example, if the kernel package gets renamed
to kernel-ide, then subsequent 'pacman -Syu' calls will not pick up the upgrade, due
to the differing package names.  \fIreplaces\fP handles this.

.TP
.B options \fI(array)\fP
This is an array of various boolean options. The possible values are:
.nf
nodocs     Don't add any documentation automatically (ie. when there'll be
           a separate documentation subpackage).
nostrip    Don't strip binaries/libraries.
force      This is used to force the package to be upgraded by --sysupgrade,
           even if its an older version.
nobuild    If this directive set, gensync will ignore this package, so users
           must build  these packages on their machines, they will not be able
           to install them with pacman -S. Useful for closed-source, but
           freeware programs.
nofakeroot Don't drop privileges after chrooting. Required by some broken
           packages.
.fi

.SH  What is the process of chrooted build ?

First, what is chroot? We currently use fakeroot to prevent build() from
modifying the host system, and we use a prefix or DESTDIR directive to install
everything to a directory and not under to the host system. This is good, but
not enough.

This system lacks of the ability to control the list of installed packages
during the build on the system of a packager, the given compiled package maybe
linked itself to an extra installed library. This way we can't really control
the list of real dependencies. For example if libquicktime is installed from
source on my system, then mplayer or any other program can link itself to that,
and so that depends() will be incorrect. Or if I have the closed source binary
NVidia drivers installed, some programs link tho NVidia's libraries.

Of course there is a sollution to avoid this, to use a real chroot instead of a
simple fakeroot. What is this means? The followings:

When starting the build, a core chroot system is installed under /var/chroot.
(Of course you can change this value under /etc/makepkg.conf.) The core system
contains ~60 packages which are must installed to build any package in
a chrooted environment. These packages (for example gcc, kernel-headers, make)
should not be mentioned in makedepends(). 'pacman -Sg core chroot-core
devel-core' should show you the actial list. (We try to change this list rarely
of course.)

When you start building with makepkg -R, pacman will install these packages to
/var/chroot if necessary. This will produce a fully "clean" Frugalware system,
that consits of base packages only. This /var/chroot is fully separated from
the host system so that this will solve the problems mentioned above.
(Linking to a library installed from source, etc.)

Here comes the fun part. The packages listed in depends() and makedepends() are
installed to this clean (/var/chroot) system. From this point, this chroot is
capable to build the specified package in it without any unnecessary package
installed, fully separated from the host system.

After this the chroot should be cleaned up which means the removal of the
installed depends() and makedepends(). This ensures us not to build from
scratch the core chroot.

This way we can prevent lots of dependency problems and it is even possible to
build packages for a different Frugalware version. This is quite efficent when
building security updates or fixing critical bugs in the -stable tree.

If the build is failed, the working directory will not be deleted, you can find
it under /var/chroot/var/tmp/fst. Later if you want to clean your chroot
(delete the working directory and remove unnecessary packages) you can use 'makepkg -CR'.

To activate building in a chroot, you should run makepkg as root at least with
the -R option.

.SH Package splitting

Package splitting means moving out a list of specifed files to subpackages (like
libmysql out of mysql) and then defining the properties of subpackages. The
\fBsubpkgs()\fP array is to define the pkgnames of the subpackages. From now all
the directives has their subfoo equivalent:
.nf
pkgname -> subpkgs()
pkgdesc -> subdescs()
license() -> sublicense()
replaces() -> subreplaces()
groups() -> subgroups()
depends() -> subdepends()
rodepends() -> subrodepends()
removes() -> subremoves()
conflicts() -> subconflicts()
provides() -> subprovides()
backup() -> subbackup()
install -> subinstall()
options -> suboptions()
archs -> subarchs()
.fi

Also note that bash does not support two-dimensional arrays, so when defining the
array of arrays, then quotes are the major separators and spaces are the minor ones.

Simple example:
.nf
Add the followings to your bottom of your FrugalBuild
subpkgs=('foo' 'bar')
subdescs=('desc of foo' 'desc of bar')
subdepends=('foodep1 foodep2' 'bardep1 bardep2')
subgroups=('apps' 'apps')
subarchs=('i686 x86_64' 'i686 x86_64')
.fi

You may define conflicts, replaces and other directives for your subpackages, but
the requirement is only to define these 5 ones.

The second part is to move some files to the - just defined - subpackages. You
should use the Fsplit command for this at the end of your build() function. You
can read more about Fsplit in the fwmakepkg documentation, but here is a short
example:
.nf

Fsplit subpkgname usr/share/

.fi
This will move the /usr/share dir of the package to the "subpkgname" subpackage.

NOTE: never use a trailing slash when defining file patterns, especially if you
use wildcards in it!

Special case: subpkgs in other repos.

The situation is the following: you have a package which is in the frugalware
repo, but you want its subpackage to be in extra. It's a but tricky, but still
possible.

The trick is to create a fake FrugalBuild in the other repo. You could place
it whereever you want, but to use repoman you need to place it under
$fst/extra/source/subpkgs/pkgname, where pkgname is the name of the original
main package.

How to create that fake FrugalBuild?

Copy the original one, but remove everything except the subfoo directives,
pkgver and pkgrel. The next step is to clarify which subpackage have to be
in which repo. This is done by removing the architectures from the subarchs()
array.

Example:
.nf

The old main:

subpkgs=('foo' 'bar')
subarchs=('i686 x86_64' 'i686 x86_64')

The new main:
subpkgs=('foo' 'bar')
subarchs=('i686 x86_64' '')

The new fake:
subpkgs=('foo' 'bar')
subarchs=('' 'i686 x86_64')

.fi
This means that bar is expected to be uploaded to extra, while foo is still in
the frugalware repo. If you move all the subpackages to extra, then of course
you can remove the whole subarchs() array from the main FrugalBuild.

.SH MAKEPKG OPTIONS
.TP
.B "\-b, \-\-builddeps"
Build missing dependencies from source.  When makepkg finds missing build-time or
run-time dependencies, it will look for the dependencies' FrugalBuild files under
$fst_root (set in your /etc/repoman.conf).  If it finds them it will
run another copy of makepkg to build and install the missing dependencies.
The child makepkg calls will be made with the \fB-b\fP and \fB-i\fP options.
.TP
.B "\-B, \-\-noccache"
Do not use ccache during build.
.TP
.B "\-c, \-\-clean"
Clean up leftover work files/directories after a successful build.
.TP
.B "\-C, \-\-cleancache"
Used with --chroot cleans up the chroot which means removing unnecessary
packages from it. If used twice, then it removes all source files from
the cache directory and cleans up the full compiler cache to free up diskspace.
.TP
.B "\-d, \-\-nodeps"
Do not perform any dependency checks.  This will let you override/ignore any
dependencies required.  There's a good chance this option will break the build
process if all of the dependencies aren't installed.
.TP
.B "\-D <pkgname>"
Clean up only one package's compiler cache. (Uses ccache -C.)
.TP
.B "\-e, \-\-noextract"
Do not extract source files.  Instead, use whatever already exists in the
src/ directory.  This is handy if you want to go into src and manually
patch/tweak code, then make a package out of the result.
.TP
.B "\-f, \-\-force"
\fBmakepkg\fP will not build a package if a \fIpkgname-pkgver-pkgrel-arch.fpm\fP
file already exists in the build directory.  You can override this behaviour with
the \fB--force\fP switch.
.TP
.B "\-G, \-\-genmd5"
Download all source files (if required) and use \fImd5sum\fP to generate md5 hashes
for each of them.  You can then redirect the output into your FrugalBuild for source
validation (makepkg -G >>FrugalBuild).
.TP
.B "\-g, \-\-gensha1"
Download all source files (if required) and use \fIsha1sum\fP to generate sha1 hashes
for each of them.  You can then redirect the output into your FrugalBuild for source
validation (makepkg -g >>FrugalBuild).
.TP
.B "\-h, \-\-help"
Output syntax and commandline options.
.TP
.B "\-i, \-\-install"
Install/Upgrade the package after a successful build.
.TP
.B "\-j <jobs>"
Sets MAKEFLAGS="-j<jobs>" before building the package.  This is useful for overriding
the MAKEFLAGS setting in /etc/makepkg.conf.
.TP
.B "\-L, \-\-nolastmod"
Disable updating the Last modified line.
.TP
.B "\-k, \-\-logging"
Logging package build process
.TP
.B "\-l <pkgname>"
Download the package's buildscript before starting the build.  This is useful
if you do not want to do a full 'repoman upd' nor want to download manually the
buildscript.
.TP
.B "\-m, \-\-nocolor"
Disable color in output messages
.TP
.B "\-n, \-\-nostrip"
Do not strip binaries and libraries.
.TP
.B "\-o, \-\-nobuild"
Download and extract files only, do not build.
.TP
.B "\-p <buildscript>"
Read the package script \fI<buildscript>\fP instead of the default (\fIFrugalBuild\fP).
.TP
.B "\-r, \-\-rmdeps"
Upon successful build, remove any dependencies installed by makepkg/pacman during
dependency auto-resolution (using \fB-b\fP or \fB-s\fP).
.TP
.B "\-R, \-\-chroot"
Build the package in a chroot environment.
.TP
.B "\-s, \-\-syncdeps"
Install missing dependencies using pacman.  When makepkg finds missing build-time
or run-time dependencies, it will run pacman to try and resolve them.  If successful,
pacman will download the missing packages from a package repository and
install them for you.
.TP
.B "\-u, \-\-noup2date"
Do not check for newer version before starting build. Normally makepkg will
prevent you from building obsolete source by mistake. If you know what you are
doing, you can disable this feature with this switch.
.B "\-S, \-\-sudosync"
Install missing dependencies using pacman and sudo. This is the same as \fB-s\fP
except that makepkg will call pacman with sudo. This means you don't have to
build as root to use dependency auto-resolution.
.TP
.TP
.B "\-w <destdir>"
Write the resulting package file to the directory \fI<destdir>\fP instead of the
current working directory.
.TP
.B "\-\-noconfirm"
When calling pacman to resolve dependencies or conflicts, makepkg can pass
the \fI--noconfirm\fP option to it so it does not wait for any user
input before proceeding with operations.
.TP
.B "\-\-noprogressbar"
When calling pacman, makepkg can pass the \fI--noprogressbar\fP option to it.
This is useful if one is directing makepkg's output to a non-terminal (ie, a file).

.SH CONFIGURATION
Configuration options are stored in \fI/etc/makepkg.conf\fP.  This file is parsed
as a bash script, so you can export any special compiler flags you wish
to use.  This is helpful for building for different architectures, or with
different optimizations.

\fBNOTE:\fP This does not guarantee that all package Makefiles will use
your exported variables.  Some of them are flaky...
.SH SEE ALSO
\fBpacman\fP is the package manager that uses packages built by makepkg.

See the Frugalware Linux Documentation for package-building guidelines if you
wish to contribute packages to the Frugalware Linux project.
.SH AUTHOR
.nf
Judd Vinet <jvinet@zeroflux.org>
and the Frugalware developers <frugalware-devel@frugalware.org>
.fi
