= makepkg(8)

== NAME

makepkg - creates pacman-g2 packages

== SYNOPSIS

makepkg [options]

== DESCRIPTION

`makepkg` will build packages for you. All it needs is a build-capable Linux
platform, `wget`, and some build scripts. The advantage to a script-based build
is that you only really do the work once. Once you have the build script for a
package, you just need to run `makepkg` and it will do the rest: download and
validate source files, check dependencies, configure the build-time settings,
build the package, install the package into a temporary root, make
customizations, generate meta-info, and package the whole thing up for
`pacman-g2` to use.

`makeworld` can be used to rebuild an entire package group or the entire build
tree. See `makeworld --help` for syntax.

== OPTIONS

-a, --searchdeps::
	Try to guess the correct value of the depends() array.

-A <url>::
	rsync cache url to use before downloading anything.

-b, --builddeps::
	Build missing dependencies from source. When makepkg finds missing build-time
	or run-time dependencies, it will look for the dependencies' FrugalBuild
	files under $fst_root (set in your /etc/repoman.conf). If it finds them it will
	run another copy of makepkg to build and install the missing dependencies. The
	child makepkg calls will be made with the -b and -i options.

-B, --noccache::
	Do not use ccache during build.

-c, --clean::
	Clean up leftover work files/directories after a successful build.

-C, --cleancache::
	Used with --chroot cleans up the chroot which means removing unnecessary
	packages from it. If used twice, then it removes all source files from the
	cache directory and cleans up the full compiler cache to free up disk space.

-d, --nodeps::
	Do not perform any dependency checks. This will let you override/ignore any
	dependencies required. There's a good chance this option will break the build
	process if all of the dependencies aren't installed.

-D <pkgname>::
	Clean up only one package's compiler cache. (Uses ccache -C.)

-e, --noextract::
	Do not extract source files. Instead, use whatever already exists in the src/
	directory. This is handy if you want to go into src and manually patch/tweak
	code, then make a package out of the result.

-f, --force::
	makepkg will not build a package if a pkgname-pkgver-pkgrel-arch.fpm file
	already exists in the build directory. You can override this behaviour with the
	--force switch.

-g, --gensha1::
	Download all source files (if required) and use sha1sum to generate sha1 hashes
	for each of them.

-G, --wrtsha1::
	Same as `-g`, but replace the contents of the sha1sums() array in the FrugalBuild
	with the result.

-h, --help::
	Output syntax and commandline options.

-i, --install::
	Install/Upgrade the package after a successful build.

-j <jobs>::
	Sets MAKEFLAGS="-j<jobs>" before building the package. This is useful for
	overriding the MAKEFLAGS setting in /etc/makepkg.conf.

-l <pkgname>::
	Download the package's buildscript before starting the build. This is useful if
	you do not want to do a full 'repoman upd' nor want to download manually the
	buildscript.

-m, --nocolor::
	Disable color in output messages.

-n, --nostrip::
	Do not strip binaries and libraries.

-o, --nobuild::
	Download and extract files only, do not build.

-p <buildscript>::
	Read the package script <buildscript> instead of the default (FrugalBuild).

-r, --rmdeps::
	Upon successful build, remove any dependencies installed by makepkg/pacman-g2
	during dependency auto-resolution (using -b or -s).

-R, --chroot::
	Build the package in a chroot environment. This is the default unless -g or -o
	is used.

-H, --host::
	Build the package on the host system. The opposite of the -R option.

-s, --syncdeps::
	Install missing dependencies using pacman-g2. When makepkg finds missing
	build-time or run-time dependencies, it will run pacman-g2 to try and resolve
	them. If successful, pacman-g2 will download the missing packages from a
	package repository and install them for you.

-t <tree>::
	When building in a chroot (using -R) you may want to build packages for a
	version other than the host one. Using this option, it's possible to build
	packages for "stable" while the host system is "current" and vica versa.

-u, --noup2date::
	Do not check for newer version before starting build. Normally makepkg will
	prevent you from building obsolete source by mistake. If you know what you are
	doing, you can disable this feature with this switch. -S, --sudosync Install
	missing dependencies using pacman-g2 and sudo. This is the same as -s except
	that makepkg will call pacman-g2 with sudo. This means you don't have to build
	as root to use dependency auto-resolution.

-w <destdir>::
	Write the resulting package file to the directory <destdir> instead of the
	current working directory.

--gzip::
	Use gzip compression for a package instead of bzip2.

--noconfirm::
	When calling pacman-g2 to resolve dependencies or conflicts, makepkg can pass
	the --noconfirm option to it so it does not wait for any user input before
	proceeding with operations.

--noprogressbar::
	When calling pacman-g2, makepkg can pass the --noprogressbar option to it. This
	is useful if one is directing makepkg's output to a non-terminal (ie, a file).

== CONFIGURATION

Configuration options are stored in /etc/makepkg.conf. This file is parsed as a
bash script, so you can export any special compiler flags you wish to use. This
is helpful for building for different architectures, or with different
optimizations.

NOTE: This does not guarantee that all package Makefiles will use your exported
variables. Some of them are flaky...

== SEE ALSO

*FrugalBuild*(5), *pacman-g2*(8)

== AUTHORS

See /usr/share/doc/pacman-g2-*/AUTHORS.
