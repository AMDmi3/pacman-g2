cmake_minimum_required (VERSION 2.8)
project (PACMAN-G2)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules/")

include (CheckIncludeFile)
include (CheckIncludeFiles)
include (CheckFunctionExists)

enable_testing()

string(TOLOWER ${CMAKE_PROJECT_NAME} CMAKE_PROJECT_NAME_LOWER)
set (PACMAN_G2_VERSION 3.8.9)
set (PACMAN_G2_LIB_VERSION ${PACMAN_G2_VERSION})
set (PM_VERSION_TEMP "0." ${PACMAN_G2_LIB_VERSION})
string (REPLACE ";" "" PM_VERSION ${PM_VERSION_TEMP})

set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -D_GNU_SOURCE")

option(DISABLE_BINDINGS "disables all libpacman bindings" OFF)
option(FAKEROOT_PROOF "enable fakeroot proof protection" OFF)

SET(ENABLE_NLS TRUE CACHE BOOL "Translation program messages to the user's native language ?")

FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
  SET(HAS_DOXYGEN TRUE CACHE BOOL "Use Doxygen")
ENDIF(DOXYGEN_FOUND)

FIND_PACKAGE(Asciidoc)
IF(ASCIIDOC_FOUND)
  SET(HAS_ASCIIDOC TRUE CACHE BOOL "Use Asciidoc")
ENDIF(ASCIIDOC_FOUND)

FIND_PACKAGE(Po4a)
IF(PO4A_FOUND)
  SET(HAS_PO4A TRUE CACHE BOOL "Po4a bindings")
ENDIF(PO4A_FOUND)

if(NOT DISABLE_BINDINGS)
  FIND_PACKAGE(SWIG)
endif(NOT DISABLE_BINDINGS)

IF(SWIG_FOUND)
  INCLUDE(${SWIG_USE_FILE})
  SET(CMAKE_SWIG_FLAGS "-I${CMAKE_SOURCE_DIR}/lib/libpacman/")

  FIND_PACKAGE(Mono)
  IF(MONO_FOUND)
    SET(HAS_CSHARP TRUE CACHE BOOL "C# bindings")
    ADD_SUBDIRECTORY(bindings/csharp)
  ENDIF(MONO_FOUND)

  FIND_PACKAGE(Java)
  FIND_PACKAGE(JNI)
  IF(JAVA_FOUND AND JNI_FOUND)
    SET(HAS_JAVA TRUE CACHE BOOL "Java bindings")
    ADD_SUBDIRECTORY(bindings/java)
  ENDIF(JAVA_FOUND AND JNI_FOUND)

  FIND_PACKAGE(Perl)
  IF(PERL_FOUND)
    find_package(PerlLibs REQUIRED)
    SET(HAS_PERL TRUE CACHE BOOL "Perl bindings")
    ADD_SUBDIRECTORY(bindings/perl)
  ENDIF(PERL_FOUND)

  FIND_PACKAGE(Vala)
  IF(VALA_FOUND)
    SET(HAS_VALA TRUE CACHE BOOL "Vala bindings")
    ADD_SUBDIRECTORY(bindings/vala)
  ENDIF(VALA_FOUND)

  FIND_PACKAGE(PythonInterp)
  IF(PYTHONINTERP_FOUND)
    FIND_PACKAGE(PythonLibs REQUIRED)
    SET(HAS_PYTHON TRUE CACHE BOOL "Python bindings")
    ADD_SUBDIRECTORY(bindings/python)
  ENDIF(PYTHONINTERP_FOUND)

ELSE()
    message(WARNING "SWIG not found or bindings disabled, no bindings will be built")
ENDIF(SWIG_FOUND)

CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES("stdlib.h;stdarg.h;string.h;float.h" STDC_HEADERS)

CHECK_FUNCTION_EXISTS(dcgettext HAVE_DCGETTEXT)
CHECK_FUNCTION_EXISTS(gettext HAVE_GETTEXT)
CHECK_FUNCTION_EXISTS(iconv HAVE_ICONV)
CHECK_FUNCTION_EXISTS(strverscmp HAVE_STRVERSCMP)

CONFIGURE_FILE (
  "${PROJECT_SOURCE_DIR}/cmake_config.h"
  "${PROJECT_SOURCE_DIR}/config.h"
  )

ADD_SUBDIRECTORY(lib/libpacman)
ADD_SUBDIRECTORY(src/versort)
ADD_SUBDIRECTORY(src/vercmp)
ADD_SUBDIRECTORY(src/pacman-g2)
ADD_SUBDIRECTORY(etc)
ADD_SUBDIRECTORY(scripts)
if(NOT DISABLE_STATIC_BUILD)
  ADD_SUBDIRECTORY(src/pacman-g2-static)
endif(NOT DISABLE_STATIC_BUILD)
ADD_SUBDIRECTORY(pactest)

