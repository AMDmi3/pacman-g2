#!/bin/bash
# 
#   gensync
#  
#   Copyright (c) 2002-2006 by Judd Vinet <jvinet@zeroflux.org>
#   Copyright (c) 2005-2006 by Miklos Vajna <vmiklos@frugalware.org>
#  
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
# 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
#   USA.
#

myver='2.9.8'

[ -z "$arch" ] && arch=`arch`
CARCH="$arch"

usage() {
  echo "gensync $myver"
  echo "usage: $0 <root> <destfile> [package_directory]"
	echo
	echo "gensync will generate a sync database by reading all FrugalBuild files"
	echo "from <root>.  gensync builds the database in a temporary directory"
	echo "and then compresses it to <destfile>."
	echo
	echo "gensync will calculate sha1sums of packages in the same directory as"
	echo "<destfile>, unless an alternate [package_directory] is specified."
	echo
	echo "note: The <destfile> name is important.  It must be of the form"
	echo "      {treename}.fdb where {treename} is the name of the custom"
	echo "      package repository you configured in /etc/pacman.conf.  The"
	echo "      generated database must reside in the same directory as your"
	echo "      custom packages (also configured in /etc/pacman.conf)"
	echo
	echo "example:  gensync /var/fst/local /home/mypkgs/custom.fdb"
	echo
  echo
  exit 0
}

die() {
	echo "gensync: $*" >&2
	rm -rf $gstmpdir
	exit 1
}

error() { return 0; }
Fdie() { return 0; }
Finclude() { return 0; }

check_option() {
	local i
	for i in ${options[@]}; do
		local uc=`echo $i | tr [:lower:] [:upper:]`
		local lc=`echo $i | tr [:upper:] [:lower:]`
		if [ "$uc" = "$1" -o "$lc" = "$1" ]; then
			echo $1
			return
		fi
	done
}

get_sha1checksum()
{
	if [ -f $pkgfile ]; then
		sha1line=`sha1sum $pkgfile`
		[ ! -z "$sha1line" ] && pkgsha1sum=${sha1line%  *}
		echo $pkgsha1sum
	fi
	return 0
}

db_write_entry()
{
	if [ "$pkgdir" != "" ]; then
		pkgfile="$pkgdir/$1-$pkgver-$pkgrel-$arch.fpm"
	else
		pkgfile="$destdir/$1-$pkgver-$pkgrel-$arch.fpm"
	fi
	csize=`du -b $pkgfile 2>/dev/null | cut -f1`
	pkgsha1sum=`get_sha1checksum $pkgfile`
	if [ -z $pkgsha1sum ]; then
		if [ ! "$forcepkgs" ]; then
			die "missing package: $pkgfile"
		else
			echo "gensync: missing package: $pkgfile" >&2
			return 0
		fi
	fi
	cd $gstmpdir
	mkdir $1-$pkgver-$pkgrel || return 1
	cd $1-$pkgver-$pkgrel
	# desc
	: >desc
	echo "%NAME%" >>desc
	echo "$1" >>desc
	echo "" >>desc
	echo "%VERSION%" >>desc
	echo "$pkgver-$pkgrel" >>desc
	echo "" >>desc
	if [ -n "$pkgdesc" ]; then
		echo "%DESC%" >>desc
		echo "$pkgdesc" >>desc
		echo "" >>desc
	fi
	if [ ${#groups[*]} -gt 0 ]; then
		echo "%GROUPS%" >>desc
		for it in ${groups[@]}; do
			echo "$it" >>desc
		done
		echo "" >>desc
	fi
	echo "%ARCH%" >>desc
	echo "$arch" >>desc
	echo "" >>desc
	if [ -n $csize ]; then
		echo "%CSIZE%" >>desc
		echo "$csize" >>desc
		echo "" >>desc
	fi
	if [ ! -z $pkgsha1sum ]; then
		echo "%SHA1SUM%" >>desc
		echo "$pkgsha1sum" >>desc
		echo "" >>desc
	fi
	if [ ${#replaces[*]} -gt 0 ]; then
		echo "%REPLACES%" >>desc
		for it in ${replaces[@]}; do
			echo "$it" >>desc
		done
		echo "" >>desc
	fi
	if [ "$force" = "y" -o "$force" = "Y" -o "`check_option FORCE`" ]; then
		echo "%FORCE%" >>desc
		echo "" >>desc
	fi
	# depends
	: >depends
	if [ ${#depends[*]} -gt 0 -o ${#rodepends[*]} -gt 0 ]; then
		echo "%DEPENDS%" >>depends
		for it in ${depends[@]} ${rodepends[@]}; do
		  echo "$it" >>depends
		done
		echo "" >>depends
	fi
	if [ ${#conflicts[*]} -gt 0 ]; then
		echo "%CONFLICTS%" >>depends
		for it in ${conflicts[@]}; do
		  echo "$it" >>depends
		done
		echo "" >>depends
	fi
	if [ ${#provides[*]} -gt 0 ]; then
		echo "%PROVIDES%" >>depends
		for it in ${provides[@]}; do
		  echo "$it" >>depends
		done
		echo "" >>depends
	fi
	# preserve the modification time
	touch -r $file desc depends
}

in_array()
{
	local i
	needle=$1
	shift 1
	# array() undefined
	[ -z "$1" ] && return 1
	for i in $*
	do
		[ "$i" == "$needle" ] && return 0
	done
	return 1
}

if [ $# -lt 2 ]; then
	usage
	exit 1
fi

if [ "$1" = "-h" -o "$1" = "--help" ]; then
	usage
	exit 0
fi

if [ "$1" = "-f" -o "$1" = "--force" ]; then
	forcepkgs=1
	shift 1
fi

d=`dirname $1`
rootdir=`cd $d && pwd`/`basename $1`
d=`dirname $2`
destdir=`cd $d && pwd`
destfile="$destdir/`basename $2`"
pkgdir=
if [ "$3" != "" ]; then
	pkgdir=$3
fi
gstmpdir=$(mktemp -d /tmp/gensync.XXXXXXXXXX) || exit 1

[ ! -d $rootdir ] && die "invalid root dir: $rootdir"
echo "gensync: building database entries, generating sha1sums..." >&2
cd `dirname $2`
for file in `find $rootdir/* -name FrugalBuild`; do
	unset nobuild archs
	source $file || die "errors parsing $file"
	if in_array $arch ${archs[@]} && [ ! "$nobuild" -a ! "`check_option NOBUILD`" ]; then
		unset pkgname pkgver pkgrel pkgdesc force
		unset groups replaces provides depends rodepends conflicts options
		unset subpkgs subdescs sublicense subreplaces subgroups subarchs
		unset subdepends subrodepends subremoves subconflicts
		unset subprovides subbackup subinstall suboptions
		source $file || return 1
		db_write_entry $pkgname || die "error writing entry for $pkgname ($file)"
	fi
	if [ ! -z "$subpkgs" ] && [ ! "$nobuild" -a ! "`check_option NOBUILD`" ]; then
		i=0
		for subpkg in "${subpkgs[@]}"
		do
			unset pkgdesc groups archs replaces force depends rodepends conflicts provides options
			pkgdesc="${subdescs[$i]}"
			groups="${subgroups[$i]}"
			archs="${subarchs[$i]}"
			replaces="${subreplaces[$i]}"
			force="${subforce[$i]}"
			depends="${subdepends[$i]}"
			rodepends="${subrodepends[$i]}"
			conflicts="${subconflicts[$i]}"
			provides="${subprovides[$i]}"
			options="${suboptions[$i]}"
			if in_array $arch ${archs[@]}; then
				db_write_entry $subpkg || die "error writing entry for $subpkg ($file)"
			fi
			i=$(($i+1))
		done
	fi
done

echo "gensync: compressing to $destfile..." >&2
cd $gstmpdir
tar c * | gzip -9 >$destfile
[ $? -gt 0 ] && die "error writing to $destfile"

rm -rf $gstmpdir
exit 0
